require("dotenv").config(); // ‚úÖ Charger les variables d'environnement

const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const appointmentRoutes = require("./routes/appointmentRoutes");
const authRoutes = require("./routes/authRoutes"); // ‚úÖ Importer l‚Äôauth

const app = express();

// ‚úÖ Middleware (OBLIGATOIRE pour que `req.body` fonctionne)
app.use(cors());
app.use(express.json());      // üî• Active la prise en charge des JSON
app.use(express.urlencoded({ extended: true })); // üî• Support des requ√™tes `x-www-form-urlencoded`

// üìå Debug : V√©rifier que MONGO_URI est bien r√©cup√©r√©
console.log("üîç MONGO_URI :", process.env.MONGO_URI);

// ‚úÖ Connexion √† MongoDB
const mongoURI = process.env.MONGO_URI || "mongodb://localhost:27017/APP"; // ‚úÖ Ajout d'une valeur par d√©faut
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log("‚úÖ Connect√© √† MongoDB !"))
  .catch(err => console.error("‚ùå Erreur de connexion MongoDB :", err));

// ‚úÖ Routes API
app.use("/api/auth", authRoutes);
app.use("/api/appointments", appointmentRoutes);

// ‚úÖ D√©marrer le serveur
const PORT = process.env.PORT || 5002;
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
});
